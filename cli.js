#!/usr/bin/env node

const chalk = require('chalk');
const { 
  init, 
  deposit, 
  transfer, 
  autoTransfer, 
  directTransfer,
  balance,
  treasuryBalance,
  claimCompoundInterest,
  fundTreasury,
  withdrawTreasury
} = require('./src/commands');
const { showHelp } = require('./src/commands/utils');

// X·ª≠ l√Ω l·ªánh t·ª´ d√≤ng l·ªánh
const command = process.argv[2];
const args = process.argv.slice(3);

// ƒê·∫∑t b·ªô b·∫Øt l·ªói chung
process.on('unhandledRejection', (error) => {
  console.error(chalk.red('‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c:'), error);
  process.exit(1);
});

// T·∫°o m·ªôt b·∫£ng l·ªánh v·ªõi m√¥ t·∫£ ng·∫Øn
const commands = {
  'init': {
    fn: init,
    description: 'Kh·ªüi t·∫°o vault v·ªõi keypair c·ªßa b·∫°n',
    usage: 'init [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'deposit': {
    fn: deposit,
    description: 'G·ª≠i SOL v√†o treasury c·ªßa b·∫°n',
    usage: 'deposit [s·ªë l∆∞·ª£ng SOL] [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'transfer': {
    fn: transfer,
    description: 'Chuy·ªÉn SOL t·ª´ treasury c·ªßa b·∫°n ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch',
    usage: 'transfer [s·ªë l∆∞·ª£ng SOL] [ƒë·ªãa ch·ªâ ƒë√≠ch] [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'auto-transfer': {
    fn: autoTransfer,
    description: 'T·ª± ƒë·ªông kh·ªüi t·∫°o, n·∫°p v√† chuy·ªÉn SOL trong m·ªôt l·ªánh',
    usage: 'auto-transfer [s·ªë l∆∞·ª£ng SOL] [ƒë·ªãa ch·ªâ ƒë√≠ch] [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'direct-transfer': {
    fn: directTransfer,
    description: 'Chuy·ªÉn SOL qua contract (deposit v√† transfer trong m·ªôt l·ªánh)',
    usage: 'direct-transfer [s·ªë l∆∞·ª£ng SOL] [ƒë·ªãa ch·ªâ ƒë√≠ch] [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'balance': {
    fn: balance,
    description: 'Ki·ªÉm tra s·ªë d∆∞ c·ªßa ƒë·ªãa ch·ªâ',
    usage: 'balance [ƒë·ªãa ch·ªâ (t√πy ch·ªçn)] [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair (t√πy ch·ªçn)]'
  },
  'treasury-balance': {
    fn: treasuryBalance,
    description: 'Ki·ªÉm tra s·ªë d∆∞ trong treasury c·ªßa b·∫°n',
    usage: 'treasury-balance [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'claim-interest': {
    fn: claimCompoundInterest,
    description: 'Nh·∫≠n l√£i k√©p ƒë√£ t√≠ch l≈©y',
    usage: 'claim-interest [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'fund-treasury': {
    fn: fundTreasury,
    description: 'N·∫°p SOL v√†o contract treasury ƒë·ªÉ tr·∫£ l√£i',
    usage: 'fund-treasury [s·ªë l∆∞·ª£ng SOL] [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'withdraw-treasury': {
    fn: withdrawTreasury,
    description: 'R√∫t SOL t·ª´ contract treasury (ch·ªâ admin)',
    usage: 'withdraw-treasury [s·ªë l∆∞·ª£ng SOL] [ƒë·ªãa ch·ªâ nh·∫≠n] [ƒë∆∞·ªùng d·∫´n ƒë·∫øn keypair]'
  },
  'help': {
    fn: () => showDetailedHelp(),
    description: 'Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p',
    usage: 'help [t√™n l·ªánh (t√πy ch·ªçn)]'
  }
};

// Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ
function showCommandHelp(commandName) {
  const command = commands[commandName];
  if (!command) {
    console.error(chalk.red(`‚ùå L·ªánh kh√¥ng t·ªìn t·∫°i: ${commandName}`));
    return;
  }

  console.log(`
${chalk.green.bold(`L·ªánh: ${commandName}`)}
${chalk.yellow('M√¥ t·∫£:')} ${command.description}
${chalk.yellow('C√°ch s·ª≠ d·ª•ng:')} ${chalk.cyan(`node cli.js ${command.usage}`)}
  `);
}

// Hi·ªÉn th·ªã tr·ª£ gi√∫p chi ti·∫øt
function showDetailedHelp() {
  const specificCommand = args[0];
  
  if (specificCommand && commands[specificCommand]) {
    return showCommandHelp(specificCommand);
  }
  
  console.log(`
${chalk.green.bold('SOL Transfer CLI - H·ªá th·ªëng qu·∫£n l√Ω Treasury v·ªõi l√£i k√©p')}

${chalk.yellow('C√°ch s·ª≠ d·ª•ng:')}
  ${chalk.cyan('node cli.js <l·ªánh> [t√πy ch·ªçn]')}

${chalk.yellow('C√°c l·ªánh v√† t√≠nh nƒÉng ch√≠nh:')}
  ${chalk.cyan('init')}               - Kh·ªüi t·∫°o vault v·ªõi keypair c·ªßa b·∫°n
  ${chalk.cyan('deposit')}            - G·ª≠i SOL v√†o treasury c·ªßa b·∫°n
  ${chalk.cyan('transfer')}           - Chuy·ªÉn SOL t·ª´ treasury c·ªßa b·∫°n ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch
  ${chalk.cyan('auto-transfer')}      - T·ª± ƒë·ªông kh·ªüi t·∫°o, n·∫°p v√† chuy·ªÉn SOL trong m·ªôt l·ªánh
  ${chalk.cyan('direct-transfer')}    - Chuy·ªÉn SOL qua contract (deposit v√† transfer trong m·ªôt l·ªánh)
  ${chalk.cyan('balance')}            - Ki·ªÉm tra s·ªë d∆∞ c·ªßa ƒë·ªãa ch·ªâ
  ${chalk.cyan('treasury-balance')}   - Ki·ªÉm tra s·ªë d∆∞ trong treasury c·ªßa b·∫°n
  ${chalk.cyan('claim-interest')}     - Nh·∫≠n l√£i k√©p ƒë√£ t√≠ch l≈©y (5% APY)
  ${chalk.cyan('fund-treasury')}      - N·∫°p SOL v√†o contract treasury ƒë·ªÉ tr·∫£ l√£i
  ${chalk.cyan('withdraw-treasury')}  - R√∫t SOL t·ª´ contract treasury (ch·ªâ admin)
  ${chalk.cyan('help')}               - Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p n√†y

${chalk.yellow('V√≠ d·ª• th√¥ng d·ª•ng:')}
  ${chalk.cyan('node cli.js init')}
  ${chalk.cyan('node cli.js deposit 0.1')}
  ${chalk.cyan('node cli.js transfer 0.05 [ƒë·ªãa ch·ªâ ƒë√≠ch]')}
  ${chalk.cyan('node cli.js claim-interest')}

${chalk.yellow('ƒê·ªÉ xem chi ti·∫øt v·ªÅ m·ªôt l·ªánh c·ª• th·ªÉ:')}
  ${chalk.cyan('node cli.js help [t√™n l·ªánh]')}
  `);
}

// Hi·ªÉn th·ªã th√¥ng tin khi kh·ªüi ch·∫°y
console.log(chalk.bold.cyan(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë       SOL Transfer CLI - Vault & Treasury     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`));

// Th·ª±c thi l·ªánh
async function runCommand() {
  // N·∫øu kh√¥ng c√≥ l·ªánh ho·∫∑c l·ªánh l√† help, hi·ªÉn th·ªã tr·ª£ gi√∫p
  if (!command || command === 'help') {
    const cmdToShow = args[0];
    if (cmdToShow && commands[cmdToShow]) {
      showCommandHelp(cmdToShow);
    } else {
      showDetailedHelp();
    }
    return;
  }

  // Ki·ªÉm tra xem l·ªánh c√≥ t·ªìn t·∫°i kh√¥ng
  const commandObj = commands[command];
  if (!commandObj) {
    console.error(chalk.red(`‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: ${command}`));
    showDetailedHelp();
    return;
  }

  // Hi·ªÉn th·ªã th√¥ng tin ƒëang th·ª±c thi
  console.log(chalk.yellow(`üöÄ ƒêang th·ª±c thi l·ªánh: ${command}...`));

  // Th·ª±c thi l·ªánh v·ªõi tham s·ªë
  try {
    await commandObj.fn(...args);
    console.log(chalk.green('‚úÖ Th·ª±c thi l·ªánh th√†nh c√¥ng!'));
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói khi th·ª±c thi l·ªánh '${command}':`), error.message);
    if (error.logs) {
      console.error(chalk.yellow('üìú Logs:'));
      error.logs.forEach(log => console.error(chalk.gray(`   ${log}`)));
    }
    process.exit(1);
  }
}

runCommand(); 