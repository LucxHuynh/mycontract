#!/usr/bin/env node

const chalk = require('chalk');
const readline = require('readline');
const { 
  init, 
  deposit, 
  transfer, 
  autoTransfer, 
  directTransfer,
  balance,
  treasuryBalance,
  claimCompoundInterest,
  fundTreasury,
  withdrawTreasury
} = require('./src/commands');

// T·∫°o interface readline v·ªõi t·∫Øt echo ƒë·ªÉ ngƒÉn hi·ªÉn th·ªã nh·∫≠p li·ªáu k√©p
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false // T·∫Øt ch·∫ø ƒë·ªô terminal ƒë·ªÉ tr√°nh hi·ªÉn th·ªã k√©p
});

// H√†m h·ªèi ng∆∞·ªùi d√πng
const question = (question) => {
  return new Promise((resolve) => {
    process.stdout.write(question); // S·ª≠ d·ª•ng process.stdout.write thay v√¨ rl.question
    rl.once('line', (answer) => {
      resolve(answer.trim());
    });
  });
};

// Hi·ªÉn th·ªã menu ch√≠nh
async function showMainMenu() {
  console.clear(); // X√≥a m√†n h√¨nh
  console.log(`${chalk.bold.cyan('=== SOL TRANSFER MENU ===')}

${chalk.cyan('1.')} Kh·ªüi t·∫°o vault
${chalk.cyan('2.')} G·ª≠i SOL v√†o treasury
${chalk.cyan('3.')} Chuy·ªÉn SOL t·ª´ treasury
${chalk.cyan('4.')} T·ª± ƒë·ªông kh·ªüi t·∫°o v√† chuy·ªÉn
${chalk.cyan('5.')} Chuy·ªÉn SOL qua contract
${chalk.cyan('6.')} Ki·ªÉm tra s·ªë d∆∞ ƒë·ªãa ch·ªâ
${chalk.cyan('7.')} Ki·ªÉm tra s·ªë d∆∞ treasury
${chalk.cyan('8.')} Nh·∫≠n l√£i k√©p
${chalk.cyan('9.')} N·∫°p SOL v√†o contract treasury
${chalk.cyan('0.')} Tho√°t`);

  const choice = await question(chalk.green('\nNh·∫≠p s·ªë (0-9): '));
  
  // X·ª≠ l√Ω l·ª±a ch·ªçn
  switch (choice) {
    case '0':
      console.log(chalk.yellow('üëã T·∫°m bi·ªát!'));
      rl.close();
      process.exit(0);
      break;
    case '1':
      await handleInit();
      break;
    case '2':
      await handleDeposit();
      break;
    case '3':
      await handleTransfer();
      break;
    case '4':
      await handleAutoTransfer();
      break;
    case '5':
      await handleDirectTransfer();
      break;
    case '6':
      await handleBalance();
      break;
    case '7':
      await handleTreasuryBalance();
      break;
    case '8':
      await handleClaimInterest();
      break;
    case '9':
      await handleFundTreasury();
      break;
    default:
      console.log(chalk.red('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá (0-9)'));
  }
  
  // ƒê·ª£i ng∆∞·ªùi d√πng b·∫•m ph√≠m tr∆∞·ªõc khi hi·ªÉn th·ªã l·∫°i menu
  await waitForKey();
  return showMainMenu();
}

// ƒê·ª£i ng∆∞·ªùi d√πng b·∫•m ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c
async function waitForKey() {
  console.log(chalk.green('\nB·∫•m ph√≠m b·∫•t k·ª≥ ƒë·ªÉ ti·∫øp t·ª•c...'));
  
  return new Promise(resolve => {
    rl.once('line', () => {
      resolve();
    });
  });
}

// X·ª≠ l√Ω kh·ªüi t·∫°o vault
async function handleInit() {
  console.clear();
  console.log(chalk.bold.cyan('=== Kh·ªüi t·∫°o Vault ===\n'));
  
  try {
    await init();
    console.log(chalk.green('‚úÖ Kh·ªüi t·∫°o vault th√†nh c√¥ng!'));
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// X·ª≠ l√Ω g·ª≠i SOL
async function handleDeposit() {
  console.clear();
  console.log(chalk.bold.cyan('=== G·ª≠i SOL v√†o Treasury ===\n'));
  
  try {
    const amount = await question(chalk.yellow('S·ªë l∆∞·ª£ng SOL: '));
    
    // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
      console.log(chalk.red('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá'));
      return;
    }
    
    await deposit(amount);
    console.log(chalk.green(`‚úÖ ƒê√£ g·ª≠i ${amount} SOL th√†nh c√¥ng!`));
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// X·ª≠ l√Ω chuy·ªÉn SOL
async function handleTransfer() {
  console.clear();
  console.log(chalk.bold.cyan('=== Chuy·ªÉn SOL t·ª´ Treasury ===\n'));
  
  try {
    const amount = await question(chalk.yellow('S·ªë l∆∞·ª£ng SOL: '));
    
    // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
      console.log(chalk.red('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá'));
      return;
    }
    
    const destination = await question(chalk.yellow('ƒê·ªãa ch·ªâ ƒë√≠ch: '));
    
    // Ki·ªÉm tra ƒë·ªãa ch·ªâ
    if (!destination || destination.length < 32) {
      console.log(chalk.red('‚ùå ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá'));
      return;
    }
    
    await transfer(amount, destination);
    console.log(chalk.green(`‚úÖ ƒê√£ chuy·ªÉn ${amount} SOL th√†nh c√¥ng!`));
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// X·ª≠ l√Ω auto transfer
async function handleAutoTransfer() {
  console.clear();
  console.log(chalk.bold.cyan('=== T·ª± ƒê·ªông Kh·ªüi T·∫°o v√† Chuy·ªÉn SOL ===\n'));
  
  try {
    const amount = await question(chalk.yellow('S·ªë l∆∞·ª£ng SOL: '));
    
    // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
      console.log(chalk.red('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá'));
      return;
    }
    
    const destination = await question(chalk.yellow('ƒê·ªãa ch·ªâ ƒë√≠ch: '));
    
    // Ki·ªÉm tra ƒë·ªãa ch·ªâ
    if (!destination || destination.length < 32) {
      console.log(chalk.red('‚ùå ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá'));
      return;
    }
    
    await autoTransfer(amount, destination);
    console.log(chalk.green(`‚úÖ ƒê√£ t·ª± ƒë·ªông chuy·ªÉn ${amount} SOL th√†nh c√¥ng!`));
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// X·ª≠ l√Ω direct transfer
async function handleDirectTransfer() {
  console.clear();
  console.log(chalk.bold.cyan('=== Chuy·ªÉn SOL Qua Contract ===\n'));
  
  try {
    const amount = await question(chalk.yellow('S·ªë l∆∞·ª£ng SOL: '));
    
    // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
      console.log(chalk.red('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá'));
      return;
    }
    
    const destination = await question(chalk.yellow('ƒê·ªãa ch·ªâ ƒë√≠ch: '));
    
    // Ki·ªÉm tra ƒë·ªãa ch·ªâ
    if (!destination || destination.length < 32) {
      console.log(chalk.red('‚ùå ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá'));
      return;
    }
    
    await directTransfer(amount, destination);
    console.log(chalk.green(`‚úÖ ƒê√£ chuy·ªÉn ${amount} SOL qua contract th√†nh c√¥ng!`));
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// X·ª≠ l√Ω ki·ªÉm tra s·ªë d∆∞
async function handleBalance() {
  console.clear();
  console.log(chalk.bold.cyan('=== Ki·ªÉm Tra S·ªë D∆∞ ƒê·ªãa Ch·ªâ ===\n'));
  
  try {
    const useAddress = await question(chalk.yellow('Ki·ªÉm tra ƒë·ªãa ch·ªâ c·ª• th·ªÉ? (y/n): '));
    
    if (useAddress.toLowerCase() === 'y') {
      const address = await question(chalk.yellow('Nh·∫≠p ƒë·ªãa ch·ªâ: '));
      await balance(address);
    } else {
      await balance();
    }
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// X·ª≠ l√Ω ki·ªÉm tra s·ªë d∆∞ treasury
async function handleTreasuryBalance() {
  console.clear();
  console.log(chalk.bold.cyan('=== Ki·ªÉm Tra S·ªë D∆∞ Treasury ===\n'));
  
  try {
    await treasuryBalance();
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// X·ª≠ l√Ω nh·∫≠n l√£i k√©p
async function handleClaimInterest() {
  console.clear();
  console.log(chalk.bold.cyan('=== Nh·∫≠n L√£i K√©p ===\n'));
  
  try {
    await claimCompoundInterest();
    console.log(chalk.green('‚úÖ ƒê√£ nh·∫≠n l√£i k√©p th√†nh c√¥ng!'));
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// X·ª≠ l√Ω n·∫°p ti·ªÅn v√†o contract treasury
async function handleFundTreasury() {
  console.clear();
  console.log(chalk.bold.cyan('=== N·∫°p SOL V√†o Contract Treasury ===\n'));
  
  try {
    const amount = await question(chalk.yellow('S·ªë l∆∞·ª£ng SOL: '));
    
    // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
      console.log(chalk.red('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá'));
      return;
    }
    
    await fundTreasury(amount);
    console.log(chalk.green(`‚úÖ ƒê√£ n·∫°p ${amount} SOL v√†o contract treasury!`));
  } catch (error) {
    console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  }
}

// B·∫Øt l·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
process.on('unhandledRejection', (error) => {
  console.error(chalk.red(`‚ùå L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c: ${error.message}`));
  rl.close();
  process.exit(1);
});

// B·∫Øt CTRL+C ƒë·ªÉ tho√°t
process.on('SIGINT', () => {
  console.log(chalk.yellow('\nüëã T·∫°m bi·ªát!'));
  rl.close();
  process.exit(0);
});

// B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh
console.clear();
console.log(chalk.green('ƒêang kh·ªüi ƒë·ªông...'));
showMainMenu().catch(error => {
  console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
  rl.close();
  process.exit(1);
}); 