const { Program, AnchorProvider, BN } = require('@project-serum/anchor');
const anchor = require('@project-serum/anchor');
const { Connection, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL } = require('@solana/web3.js');
const { getConnection, loadIDL, PROGRAM_ID } = require('../utils/connection');
const { findVaultPDA, findTreasuryPDA, findContractTreasuryPDA } = require('../utils/pda');

/**
 * T·∫°o Anchor Provider t·ª´ keypair c·ªßa ng∆∞·ªùi d√πng
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi d√πng
 * @returns {AnchorProvider} - ƒê·ªëi t∆∞·ª£ng Anchor Provider
 */
const createProvider = (walletKeypair) => {
  const connection = getConnection();
  const wallet = {
    publicKey: walletKeypair.publicKey,
    signTransaction: async (transaction) => {
      transaction.partialSign(walletKeypair);
      return transaction;
    },
    signAllTransactions: async (transactions) => {
      return transactions.map((transaction) => {
        transaction.partialSign(walletKeypair);
        return transaction;
      });
    },
  };
  
  return new AnchorProvider(connection, wallet, {
    preflightCommitment: 'confirmed',
  });
};

/**
 * T·∫°o ƒë·ªëi t∆∞·ª£ng Program t·ª´ Provider
 * @param {AnchorProvider} provider - ƒê·ªëi t∆∞·ª£ng Anchor Provider
 * @returns {Program} - ƒê·ªëi t∆∞·ª£ng Anchor Program
 */
const createProgram = (provider) => {
  const idl = loadIDL();
  return new Program(idl, PROGRAM_ID, provider);
};

/**
 * Kh·ªüi t·∫°o vault ƒë·ªÉ l∆∞u tr·ªØ SOL
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi d√πng
 */
const initializeVault = async (walletKeypair) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    console.log('\nüîÑ ƒêang kh·ªüi t·∫°o vault...');
    
    // T√¨m PDAs cho vault v√† treasury
    const [vaultPDA, vaultBump] = await findVaultPDA(walletKeypair.publicKey);
    const [treasuryPDA] = await findTreasuryPDA(walletKeypair.publicKey);
    const [contractTreasuryPDA] = await findContractTreasuryPDA();
    
    // Kh·ªüi t·∫°o vault
    const provider = createProvider(walletKeypair);
    const program = createProgram(provider);
    
    // Ki·ªÉm tra vault ƒë√£ t·ªìn t·∫°i ch∆∞a
    try {
      const vault = await program.account.vault.fetch(vaultPDA);
      console.log('\n‚úÖ Vault ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥:');
      console.log(`   Vault: ${vaultPDA.toString()}`);
      console.log(`   Treasury: ${treasuryPDA.toString()}`);
      console.log(`   Contract Treasury: ${contractTreasuryPDA.toString()}`);
      console.log(`   Authority: ${vault.authority.toString()}`);
      return vault;
    } catch (e) {
      // N·∫øu kh√¥ng t√¨m th·∫•y vault, t·∫°o m·ªõi
      console.log('\nüîÑ ƒêang kh·ªüi t·∫°o vault m·ªõi...');
      
      const tx = await program.methods
        .initialize()
        .accounts({
          vault: vaultPDA,
          treasury: treasuryPDA,
          contractTreasury: contractTreasuryPDA,
          authority: walletKeypair.publicKey,
          systemProgram: anchor.web3.SystemProgram.programId,
          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,
        })
        .signers([walletKeypair])
        .rpc();
      
      console.log('\n‚úÖ ƒê√£ kh·ªüi t·∫°o vault th√†nh c√¥ng');
      console.log(`   Transaction: ${tx}`);
      console.log(`   Vault: ${vaultPDA.toString()}`);
      console.log(`   Treasury: ${treasuryPDA.toString()}`);
      console.log(`   Contract Treasury: ${contractTreasuryPDA.toString()}`);
      
      const vault = await program.account.vault.fetch(vaultPDA);
      return vault;
    }
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi kh·ªüi t·∫°o vault: ${error.message}`);
    throw error;
  }
};

/**
 * G·ª≠i SOL v√†o treasury
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi d√πng
 * @param {number} amount - S·ªë l∆∞·ª£ng SOL
 */
const depositSol = async (walletKeypair, amount) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    
    // Ki·ªÉm tra s·ªë d∆∞
    const connection = getConnection();
    const balance = await connection.getBalance(walletKeypair.publicKey);
    const balanceInSOL = balance / LAMPORTS_PER_SOL;
    
    console.log(`üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${balanceInSOL.toFixed(7)} SOL`);
    
    if (balanceInSOL < amount) {
      throw new Error(`Kh√¥ng ƒë·ªß SOL ƒë·ªÉ g·ª≠i. B·∫°n c·∫ßn t·ªëi thi·ªÉu ${amount} SOL`);
    }
    
    // T√¨m PDA cho treasury
    const [vaultPDA] = await findVaultPDA(walletKeypair.publicKey);
    const [treasuryPDA] = await findTreasuryPDA(walletKeypair.publicKey);
    const [contractTreasuryPDA] = await findContractTreasuryPDA();
    
    // Kh·ªüi t·∫°o vault n·∫øu ch∆∞a t·ªìn t·∫°i
    const provider = createProvider(walletKeypair);
    const program = createProgram(provider);
    
    try {
      await program.account.vault.fetch(vaultPDA);
    } catch (e) {
      console.log('\n‚ö†Ô∏è Vault ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. ƒêang kh·ªüi t·∫°o...');
      await initializeVault(walletKeypair);
    }
    
    // G·ª≠i SOL v√†o treasury
    console.log(`\nüîÑ ƒêang g·ª≠i ${amount} SOL v√†o treasury...`);
    
    const lamports = amount * LAMPORTS_PER_SOL;
    const tx = await program.methods
      .depositSol(new BN(lamports))
      .accounts({
        sender: walletKeypair.publicKey,
        vault: vaultPDA,
        treasury: treasuryPDA,
        contractTreasury: contractTreasuryPDA,
        systemProgram: anchor.web3.SystemProgram.programId,
        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,
      })
      .signers([walletKeypair])
      .rpc();
    
    console.log(`\n‚úÖ ƒê√£ g·ª≠i ${amount} SOL v√†o treasury`);
    console.log(`   Transaction: ${tx}`);
    
    // Ki·ªÉm tra s·ªë d∆∞ m·ªõi
    const newBalance = await connection.getBalance(walletKeypair.publicKey);
    const newBalanceInSOL = newBalance / LAMPORTS_PER_SOL;
    console.log(`üí∞ S·ªë d∆∞ m·ªõi: ${newBalanceInSOL.toFixed(7)} SOL`);
    
    return tx;
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi g·ª≠i SOL: ${error.message}`);
    throw error;
  }
};

/**
 * Chuy·ªÉn SOL t·ª´ treasury ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi d√πng
 * @param {number} amount - S·ªë l∆∞·ª£ng SOL
 * @param {PublicKey} destination - ƒê·ªãa ch·ªâ ƒë√≠ch
 */
const transferSol = async (walletKeypair, amount, destination) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    console.log(`üìç ƒê·ªãa ch·ªâ ƒë√≠ch: ${destination.toString()}`);
    
    // T√¨m PDA cho vault v√† treasury
    const [vaultPDA] = await findVaultPDA(walletKeypair.publicKey);
    const [treasuryPDA] = await findTreasuryPDA(walletKeypair.publicKey);
    const [contractTreasuryPDA] = await findContractTreasuryPDA();
    
    // Ki·ªÉm tra s·ªë d∆∞ trong treasury
    const connection = getConnection();
    const treasuryBalance = await connection.getBalance(treasuryPDA);
    const treasuryBalanceInSOL = treasuryBalance / LAMPORTS_PER_SOL;
    
    console.log(`\nüí∞ S·ªë d∆∞ trong treasury: ${treasuryBalanceInSOL.toFixed(7)} SOL`);
    
    if (treasuryBalanceInSOL < amount) {
      throw new Error(`Kh√¥ng ƒë·ªß SOL trong treasury. Hi·ªán c√≥ ${treasuryBalanceInSOL.toFixed(7)} SOL`);
    }
    
    // Chuy·ªÉn SOL t·ª´ treasury ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch
    console.log(`\nüîÑ ƒêang chuy·ªÉn ${amount} SOL t·ª´ treasury ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch...`);
    
    const provider = createProvider(walletKeypair);
    const program = createProgram(provider);
    
    try {
      await program.account.vault.fetch(vaultPDA);
    } catch (e) {
      throw new Error('Vault ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng kh·ªüi t·∫°o vault tr∆∞·ªõc.');
    }
    
    const lamports = amount * LAMPORTS_PER_SOL;
    const tx = await program.methods
      .transferSol(new BN(lamports), destination)
      .accounts({
        authority: walletKeypair.publicKey,
        vault: vaultPDA,
        treasury: treasuryPDA,
        contractTreasury: contractTreasuryPDA,
        destination: destination,
        systemProgram: anchor.web3.SystemProgram.programId,
        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,
      })
      .signers([walletKeypair])
      .rpc();
    
    console.log(`\n‚úÖ ƒê√£ chuy·ªÉn ${amount} SOL ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch`);
    console.log(`   Transaction: ${tx}`);
    
    // Ki·ªÉm tra s·ªë d∆∞ m·ªõi c·ªßa treasury v√† ƒë·ªãa ch·ªâ ƒë√≠ch
    const newTreasuryBalance = await connection.getBalance(treasuryPDA);
    const newTreasuryBalanceInSOL = newTreasuryBalance / LAMPORTS_PER_SOL;
    console.log(`üí∞ S·ªë d∆∞ m·ªõi c·ªßa treasury: ${newTreasuryBalanceInSOL.toFixed(7)} SOL`);
    
    const destinationBalance = await connection.getBalance(destination);
    const destinationBalanceInSOL = destinationBalance / LAMPORTS_PER_SOL;
    console.log(`üí∞ S·ªë d∆∞ c·ªßa ƒë·ªãa ch·ªâ ƒë√≠ch: ${destinationBalanceInSOL.toFixed(7)} SOL`);
    
    return tx;
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi chuy·ªÉn SOL: ${error.message}`);
    throw error;
  }
};

/**
 * Ki·ªÉm tra s·ªë d∆∞ trong treasury
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi d√πng
 * @returns {Promise<number>} - S·ªë d∆∞ trong treasury (SOL)
 */
const checkTreasuryBalance = async (walletKeypair) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    
    // T√¨m treasury PDA
    const [treasuryPDA] = await findTreasuryPDA(walletKeypair.publicKey);
    
    // Ki·ªÉm tra s·ªë d∆∞
    const connection = getConnection();
    const balance = await connection.getBalance(treasuryPDA);
    const balanceInSOL = balance / LAMPORTS_PER_SOL;
    
    console.log(`\nüí∞ S·ªë d∆∞ trong treasury: ${balanceInSOL.toFixed(7)} SOL`);
    console.log(`   Treasury: ${treasuryPDA.toString()}`);
    
    // Ki·ªÉm tra vault
    const provider = createProvider(walletKeypair);
    const program = createProgram(provider);
    const [vaultPDA] = await findVaultPDA(walletKeypair.publicKey);
    
    try {
      const vault = await program.account.vault.fetch(vaultPDA);
      console.log(`   Vault: ${vaultPDA.toString()}`);
      console.log(`   Authority: ${vault.authority.toString()}`);
    } catch (e) {
      console.log(`\n‚ö†Ô∏è Vault ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o cho v√≠ n√†y.`);
    }
    
    return balanceInSOL;
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi ki·ªÉm tra s·ªë d∆∞ treasury: ${error.message}`);
    throw error;
  }
};

/**
 * T·ª± ƒë·ªông chuy·ªÉn SOL qua contract ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi d√πng
 * @param {number} amount - S·ªë l∆∞·ª£ng SOL
 * @param {PublicKey} destination - ƒê·ªãa ch·ªâ ƒë√≠ch
 */
const autoTransferSol = async (walletKeypair, amount, destination) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    console.log(`üìç ƒê·ªãa ch·ªâ ƒë√≠ch: ${destination.toString()}`);
    
    // Ki·ªÉm tra s·ªë d∆∞ v√≠
    const connection = getConnection();
    const walletBalance = await connection.getBalance(walletKeypair.publicKey);
    const walletBalanceInSOL = walletBalance / LAMPORTS_PER_SOL;
    
    console.log(`\nüí∞ S·ªë d∆∞ v√≠ c·ªßa b·∫°n: ${walletBalanceInSOL.toFixed(7)} SOL`);
    
    if (walletBalanceInSOL < amount) {
      throw new Error(`Kh√¥ng ƒë·ªß SOL trong v√≠. Hi·ªán c√≥ ${walletBalanceInSOL.toFixed(7)} SOL, c·∫ßn ${amount} SOL`);
    }
    
    // Kh·ªüi t·∫°o vault n·∫øu ch∆∞a t·ªìn t·∫°i
    console.log('\n1Ô∏è‚É£ Ki·ªÉm tra v√† kh·ªüi t·∫°o vault n·∫øu c·∫ßn...');
    await initializeVault(walletKeypair);
    
    // G·ª≠i SOL v√†o treasury
    console.log(`\n2Ô∏è‚É£ G·ª≠i ${amount} SOL v√†o treasury...`);
    await depositSol(walletKeypair, amount);
    
    // Chuy·ªÉn SOL t·ª´ treasury ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch
    console.log(`\n3Ô∏è‚É£ Chuy·ªÉn ${amount} SOL t·ª´ treasury ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch...`);
    const txId = await transferSol(walletKeypair, amount, destination);
    
    console.log(`\n‚úÖ ƒê√£ ho√†n t·∫•t quy tr√¨nh chuy·ªÉn SOL!`);
    console.log(`   Transaction ID: ${txId}`);
    
    return txId;
  } catch (error) {
    console.error(`\n‚ùå L·ªói trong qu√° tr√¨nh t·ª± ƒë·ªông chuy·ªÉn SOL: ${error.message}`);
    throw error;
  }
};

/**
 * Chuy·ªÉn SOL v√†o contract v√† contract chuy·ªÉn ti·∫øp ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi d√πng
 * @param {number} amount - S·ªë l∆∞·ª£ng SOL
 * @param {PublicKey} destination - ƒê·ªãa ch·ªâ ƒë√≠ch
 * @returns {Promise<string>} - Transaction ID
 */
const directTransferSol = async (walletKeypair, amount, destination) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    console.log(`üìç ƒê·ªãa ch·ªâ ƒë√≠ch: ${destination.toString()}`);
    
    // Ki·ªÉm tra s·ªë d∆∞ v√≠
    const connection = getConnection();
    const walletBalance = await connection.getBalance(walletKeypair.publicKey);
    const walletBalanceInSOL = walletBalance / LAMPORTS_PER_SOL;
    
    console.log(`\nüí∞ S·ªë d∆∞ v√≠ c·ªßa b·∫°n: ${walletBalanceInSOL.toFixed(7)} SOL`);
    
    if (walletBalanceInSOL < amount + 0.001) { // Th√™m ph√≠ giao d·ªãch
      throw new Error(`Kh√¥ng ƒë·ªß SOL trong v√≠. Hi·ªán c√≥ ${walletBalanceInSOL.toFixed(7)} SOL, c·∫ßn ${amount + 0.001} SOL (bao g·ªìm ph√≠ giao d·ªãch)`);
    }
    
    // T√¨m PDAs cho vault v√† treasury
    const [vaultPDA, vaultBump] = await findVaultPDA(walletKeypair.publicKey);
    const [treasuryPDA] = await findTreasuryPDA(walletKeypair.publicKey);
    const [contractTreasuryPDA] = await findContractTreasuryPDA();
    
    // Kh·ªüi t·∫°o provider v√† program
    const provider = createProvider(walletKeypair);
    const program = createProgram(provider);
    
    // Kh·ªüi t·∫°o vault n·∫øu ch∆∞a t·ªìn t·∫°i
    try {
      await program.account.vault.fetch(vaultPDA);
      console.log('\n‚úÖ Vault ƒë√£ t·ªìn t·∫°i, ti·∫øp t·ª•c giao d·ªãch');
    } catch (e) {
      console.log('\nüîÑ Vault ch∆∞a t·ªìn t·∫°i, ƒëang kh·ªüi t·∫°o...');
      await initializeVault(walletKeypair);
    }
    
    console.log(`\nüîÑ ƒêang th·ª±c hi·ªán chuy·ªÉn ${amount} SOL th√¥ng qua contract ƒë·∫øn ${destination.toString()}...`);
    
    // T·∫°o transaction g·ª≠i SOL v√†o treasury
    const lamports = amount * LAMPORTS_PER_SOL;
    
    // 1. G·ª≠i SOL v√†o treasury
    console.log(`\n1Ô∏è‚É£ ƒêang g·ª≠i ${amount} SOL v√†o treasury...`);
    const depositTx = await program.methods
      .depositSol(new BN(lamports))
      .accounts({
        sender: walletKeypair.publicKey,
        vault: vaultPDA,
        treasury: treasuryPDA,
        contractTreasury: contractTreasuryPDA,
        systemProgram: anchor.web3.SystemProgram.programId,
        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,
      })
      .signers([walletKeypair])
      .rpc();
    
    console.log(`‚úÖ ƒê√£ g·ª≠i SOL v√†o treasury. Transaction ID: ${depositTx}`);
    
    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ giao d·ªãch ƒë∆∞·ª£c x√°c nh·∫≠n
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 2. Chuy·ªÉn SOL t·ª´ treasury ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch
    console.log(`\n2Ô∏è‚É£ ƒêang chuy·ªÉn ${amount} SOL t·ª´ treasury ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch...`);
    const transferTx = await program.methods
      .transferSol(new BN(lamports), destination)
      .accounts({
        authority: walletKeypair.publicKey,
        vault: vaultPDA,
        treasury: treasuryPDA,
        contractTreasury: contractTreasuryPDA,
        destination: destination,
        systemProgram: anchor.web3.SystemProgram.programId,
        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,
      })
      .signers([walletKeypair])
      .rpc();
    
    console.log(`‚úÖ ƒê√£ chuy·ªÉn SOL ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√≠ch. Transaction ID: ${transferTx}`);
    
    // Ki·ªÉm tra s·ªë d∆∞ c·ªßa ƒë·ªãa ch·ªâ ƒë√≠ch sau khi chuy·ªÉn
    const destinationBalance = await connection.getBalance(destination);
    const destinationBalanceInSOL = destinationBalance / LAMPORTS_PER_SOL;
    console.log(`\nüí∞ S·ªë d∆∞ c·ªßa ƒë·ªãa ch·ªâ ƒë√≠ch: ${destinationBalanceInSOL.toFixed(7)} SOL`);
    
    console.log(`\n‚úÖ ƒê√£ ho√†n t·∫•t quy tr√¨nh chuy·ªÉn SOL qua contract!`);
    
    return { depositTx, transferTx };
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi chuy·ªÉn SOL: ${error.message}`);
    throw error;
  }
};

/**
 * T√≠nh l√£i k√©p cho vault (5% APY) v√† y√™u c·∫ßu thanh to√°n l√£i t·ª´ contract treasury
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi d√πng
 * @returns {Promise<string>} - Transaction ID
 */
const claimInterest = async (walletKeypair) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    
    // T√¨m PDA cho vault v√† treasury
    const [vaultPDA] = await findVaultPDA(walletKeypair.publicKey);
    const [treasuryPDA] = await findTreasuryPDA(walletKeypair.publicKey);
    const [contractTreasuryPDA] = await findContractTreasuryPDA();
    
    // Kh·ªüi t·∫°o provider v√† program
    const provider = createProvider(walletKeypair);
    const program = createProgram(provider);
    
    // Ki·ªÉm tra vault ƒë√£ t·ªìn t·∫°i ch∆∞a
    try {
      const vaultAccount = await program.account.vault.fetch(vaultPDA);
      
      // T√≠nh to√°n th√¥ng tin l√£i su·∫•t d·ª± ki·∫øn theo th·ªùi gian th·ª±c
      const now = Math.floor(Date.now() / 1000); // Th·ªùi gian hi·ªán t·∫°i (unix timestamp)
      const lastClaimTime = vaultAccount.lastInterestClaimTime.toNumber();
      const timeElapsed = now - lastClaimTime;
      const secondsElapsed = timeElapsed;
      
      // T√≠nh to√°n v√† hi·ªÉn th·ªã th√¥ng tin l√£i su·∫•t
      const totalDeposited = vaultAccount.totalDeposited.toNumber() / LAMPORTS_PER_SOL;
      const accruedInterest = vaultAccount.accruedInterest.toNumber() / LAMPORTS_PER_SOL;
      const interestRatePerSecond = 0.05 / (100 * 31536000); // 5% APY chia cho s·ªë gi√¢y trong nƒÉm
      const estimatedNewInterest = totalDeposited * interestRatePerSecond * secondsElapsed;
      const totalEstimatedInterest = accruedInterest + estimatedNewInterest;
      
      console.log(`\nüí∞ Th√¥ng tin vault c·ªßa b·∫°n:`);
      console.log(`   S·ªë ti·ªÅn g·ª≠i hi·ªán t·∫°i: ${totalDeposited.toFixed(7)} SOL`);
      console.log(`   L√£i ƒë√£ t√≠ch l≈©y nh∆∞ng ch∆∞a thanh to√°n: ${accruedInterest.toFixed(7)} SOL`);
      console.log(`   Th·ªùi gian g·ª≠i cu·ªëi: ${new Date(vaultAccount.lastDepositTime.toNumber() * 1000).toLocaleString()}`);
      console.log(`   Th·ªùi gian t√≠nh l√£i cu·ªëi: ${new Date(lastClaimTime * 1000).toLocaleString()}`);
      console.log(`   Th·ªùi gian ƒë√£ tr√¥i qua: ${secondsElapsed} gi√¢y`);
      console.log(`   L√£i m·ªõi ∆∞·ªõc t√≠nh: ${estimatedNewInterest.toFixed(9)} SOL`);
      console.log(`   T·ªïng l√£i ∆∞·ªõc t√≠nh: ${totalEstimatedInterest.toFixed(9)} SOL`);
      
      // N·∫øu qu√° √≠t th·ªùi gian tr√¥i qua, c·∫£nh b√°o ng∆∞·ªùi d√πng
      if (timeElapsed < 1) {
        console.log(`\n‚è∞ B·∫°n v·ª´a m·ªõi t√≠nh l√£i. Vui l√≤ng ƒë·ª£i √≠t nh·∫•t 1 gi√¢y tr∆∞·ªõc khi t√≠nh l√£i ti·∫øp.`);
        return null;
      }
      
      // Ki·ªÉm tra s·ªë d∆∞ trong contract treasury
      const connection = getConnection();
      const contractTreasuryBalance = await connection.getBalance(contractTreasuryPDA);
      const contractTreasuryBalanceInSOL = contractTreasuryBalance / LAMPORTS_PER_SOL;
      console.log(`   S·ªë d∆∞ trong Contract Treasury: ${contractTreasuryBalanceInSOL.toFixed(7)} SOL`);
      
      // So s√°nh l√£i ∆∞·ªõc t√≠nh v·ªõi s·ªë d∆∞ trong contract treasury
      if (contractTreasuryBalanceInSOL < totalEstimatedInterest) {
        console.log(`\n‚ö†Ô∏è C·∫£nh b√°o: S·ªë d∆∞ trong Contract Treasury (${contractTreasuryBalanceInSOL.toFixed(7)} SOL) c√≥ th·ªÉ kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n l√£i (${totalEstimatedInterest.toFixed(7)} SOL).`);
        console.log(`   B·∫°n c√≥ th·ªÉ c·∫ßn ph·∫£i n·∫°p th√™m ti·ªÅn v√†o Contract Treasury.`);
      }
      
      // G·ªçi h√†m claim_interest t·ª´ contract
      console.log(`\nüîÑ ƒêang t√≠nh l√£i v√† y√™u c·∫ßu thanh to√°n t·ª´ contract treasury...`);
      
      const tx = await program.methods
        .claimInterest()
        .accounts({
          authority: walletKeypair.publicKey,
          vault: vaultPDA,
          treasury: treasuryPDA,
          contractTreasury: contractTreasuryPDA,
          systemProgram: anchor.web3.SystemProgram.programId,
          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,
        })
        .signers([walletKeypair])
        .rpc();
      
      console.log(`\n‚úÖ ƒê√£ t√≠nh l√£i v√† nh·∫≠n thanh to√°n t·ª´ contract treasury th√†nh c√¥ng`);
      console.log(`   Transaction: ${tx}`);
      
      // L·∫•y th√¥ng tin vault m·ªõi
      const updatedVault = await program.account.vault.fetch(vaultPDA);
      const newTotalDeposited = updatedVault.totalDeposited.toNumber() / LAMPORTS_PER_SOL;
      const interestEarned = newTotalDeposited - totalDeposited;
      
      console.log(`   S·ªë ti·ªÅn trong vault m·ªõi: ${newTotalDeposited.toFixed(7)} SOL`);
      console.log(`   L√£i ƒë∆∞·ª£c thanh to√°n v√† th√™m v√†o t·ªïng s·ªë ti·ªÅn g·ª≠i: ${interestEarned.toFixed(9)} SOL`);
      console.log(`   Th·ªùi gian t√≠nh l√£i m·ªõi: ${new Date(updatedVault.lastInterestClaimTime.toNumber() * 1000).toLocaleString()}`);
      
      // Ki·ªÉm tra s·ªë d∆∞ treasury
      const treasuryBalance = await connection.getBalance(treasuryPDA);
      console.log(`   S·ªë d∆∞ m·ªõi trong Treasury: ${(treasuryBalance / LAMPORTS_PER_SOL).toFixed(7)} SOL`);
      
      return tx;
    } catch (e) {
      if (e.message.includes('TooEarlyToClaim')) {
        console.log('\n‚è∞ Vui l√≤ng ƒë·ª£i √≠t nh·∫•t 1 gi√¢y tr∆∞·ªõc khi t√≠nh l√£i.');
        return null;
      } else if (e.message.includes('NoInterestToClaimYet')) {
        console.log('\n‚ö†Ô∏è Ch∆∞a c√≥ l√£i n√†o ƒë·ªÉ nh·∫≠n. H√£y ƒë·ª£i th√™m th·ªùi gian ƒë·ªÉ t√≠ch l≈©y l√£i.');
        return null;
      } else if (e.message.includes('InsufficientFundsInContractTreasury')) {
        console.log('\n‚ùå Kh√¥ng ƒë·ªß SOL trong contract treasury ƒë·ªÉ tr·∫£ l√£i. Vui l√≤ng n·∫°p th√™m SOL v√†o contract treasury.');
        return null;
      }
      
      console.log('\n‚ö†Ô∏è Vault ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c c√≥ l·ªói kh√°c:');
      console.error(e);
      throw new Error('Vault ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng kh·ªüi t·∫°o vault tr∆∞·ªõc.');
    }
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi t√≠nh l√£i k√©p: ${error.message}`);
    throw error;
  }
};

/**
 * N·∫°p ti·ªÅn v√†o contract treasury ƒë·ªÉ thanh to√°n l√£i
 * @param {Keypair} walletKeypair - Keypair c·ªßa ng∆∞·ªùi g·ª≠i
 * @param {number} amount - S·ªë l∆∞·ª£ng SOL
 * @returns {Promise<string>} - Transaction ID
 */
const fundContractTreasury = async (walletKeypair, amount) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    
    // Ki·ªÉm tra s·ªë d∆∞
    const connection = getConnection();
    const balance = await connection.getBalance(walletKeypair.publicKey);
    const balanceInSOL = balance / LAMPORTS_PER_SOL;
    
    console.log(`üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${balanceInSOL.toFixed(7)} SOL`);
    
    if (balanceInSOL < amount) {
      throw new Error(`Kh√¥ng ƒë·ªß SOL ƒë·ªÉ g·ª≠i. B·∫°n c·∫ßn t·ªëi thi·ªÉu ${amount} SOL`);
    }
    
    // T√¨m PDA cho contract treasury
    const [contractTreasuryPDA] = await findContractTreasuryPDA();
    
    // G·ª≠i SOL v√†o contract treasury
    console.log(`\nüîÑ ƒêang g·ª≠i ${amount} SOL v√†o contract treasury...`);
    
    // Kh·ªüi t·∫°o provider v√† program
    const provider = createProvider(walletKeypair);
    const program = createProgram(provider);
    
    const lamports = amount * LAMPORTS_PER_SOL;
    const tx = await program.methods
      .fundContractTreasury(new BN(lamports))
      .accounts({
        sender: walletKeypair.publicKey,
        contractTreasury: contractTreasuryPDA,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .signers([walletKeypair])
      .rpc();
    
    console.log(`\n‚úÖ ƒê√£ g·ª≠i ${amount} SOL v√†o contract treasury`);
    console.log(`   Transaction: ${tx}`);
    
    // Ki·ªÉm tra s·ªë d∆∞ m·ªõi
    const newBalance = await connection.getBalance(walletKeypair.publicKey);
    const newBalanceInSOL = newBalance / LAMPORTS_PER_SOL;
    console.log(`üí∞ S·ªë d∆∞ v√≠ m·ªõi: ${newBalanceInSOL.toFixed(7)} SOL`);
    
    const contractTreasuryBalance = await connection.getBalance(contractTreasuryPDA);
    const contractTreasuryBalanceInSOL = contractTreasuryBalance / LAMPORTS_PER_SOL;
    console.log(`üí∞ S·ªë d∆∞ contract treasury: ${contractTreasuryBalanceInSOL.toFixed(7)} SOL`);
    
    return tx;
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi g·ª≠i SOL v√†o contract treasury: ${error.message}`);
    throw error;
  }
};

/**
 * R√∫t ti·ªÅn t·ª´ contract treasury (ch·ªâ admin)
 * @param {Keypair} walletKeypair - Keypair c·ªßa admin
 * @param {number} amount - S·ªë l∆∞·ª£ng SOL
 * @param {PublicKey} recipient - ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n
 * @returns {Promise<string>} - Transaction ID
 */
const withdrawFromContractTreasury = async (walletKeypair, amount, recipient) => {
  try {
    console.log(`\nüîë V√≠ c·ªßa b·∫°n: ${walletKeypair.publicKey.toString()}`);
    console.log(`üìç ƒê·ªãa ch·ªâ nh·∫≠n: ${recipient.toString()}`);
    
    // T√¨m PDA cho vault v√† contract treasury
    const [vaultPDA] = await findVaultPDA(walletKeypair.publicKey);
    const [contractTreasuryPDA] = await findContractTreasuryPDA();
    
    // Ki·ªÉm tra s·ªë d∆∞ trong contract treasury
    const connection = getConnection();
    const contractTreasuryBalance = await connection.getBalance(contractTreasuryPDA);
    const contractTreasuryBalanceInSOL = contractTreasuryBalance / LAMPORTS_PER_SOL;
    
    console.log(`\nüí∞ S·ªë d∆∞ trong contract treasury: ${contractTreasuryBalanceInSOL.toFixed(7)} SOL`);
    
    if (contractTreasuryBalanceInSOL < amount) {
      throw new Error(`Kh√¥ng ƒë·ªß SOL trong contract treasury. Hi·ªán c√≥ ${contractTreasuryBalanceInSOL.toFixed(7)} SOL`);
    }
    
    // Kh·ªüi t·∫°o provider v√† program
    const provider = createProvider(walletKeypair);
    const program = createProgram(provider);
    
    // Ki·ªÉm tra vault ƒë√£ t·ªìn t·∫°i ch∆∞a
    try {
      await program.account.vault.fetch(vaultPDA);
    } catch (e) {
      throw new Error('Vault ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng kh·ªüi t·∫°o vault tr∆∞·ªõc.');
    }
    
    // R√∫t ti·ªÅn t·ª´ contract treasury
    console.log(`\nüîÑ ƒêang r√∫t ${amount} SOL t·ª´ contract treasury...`);
    
    const lamports = amount * LAMPORTS_PER_SOL;
    const tx = await program.methods
      .withdrawFromContractTreasury(new BN(lamports))
      .accounts({
        admin: walletKeypair.publicKey,
        vault: vaultPDA,
        authority: walletKeypair.publicKey,
        contractTreasury: contractTreasuryPDA,
        recipient: recipient,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .signers([walletKeypair])
      .rpc();
    
    console.log(`\n‚úÖ ƒê√£ r√∫t ${amount} SOL t·ª´ contract treasury`);
    console.log(`   Transaction: ${tx}`);
    
    // Ki·ªÉm tra s·ªë d∆∞ m·ªõi
    const newContractTreasuryBalance = await connection.getBalance(contractTreasuryPDA);
    const newContractTreasuryBalanceInSOL = newContractTreasuryBalance / LAMPORTS_PER_SOL;
    console.log(`üí∞ S·ªë d∆∞ m·ªõi c·ªßa contract treasury: ${newContractTreasuryBalanceInSOL.toFixed(7)} SOL`);
    
    const recipientBalance = await connection.getBalance(recipient);
    const recipientBalanceInSOL = recipientBalance / LAMPORTS_PER_SOL;
    console.log(`üí∞ S·ªë d∆∞ c·ªßa ng∆∞·ªùi nh·∫≠n: ${recipientBalanceInSOL.toFixed(7)} SOL`);
    
    return tx;
  } catch (error) {
    console.error(`\n‚ùå L·ªói khi r√∫t ti·ªÅn t·ª´ contract treasury: ${error.message}`);
    throw error;
  }
};

module.exports = {
  initializeVault,
  depositSol,
  transferSol,
  checkTreasuryBalance,
  autoTransferSol,
  directTransferSol,
  claimInterest,
  fundContractTreasury,
  withdrawFromContractTreasury,
}; 