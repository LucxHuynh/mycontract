const fs = require('fs');
const os = require('os');
const path = require('path');
const readline = require('readline');
const { Keypair, Connection, PublicKey, LAMPORTS_PER_SOL, clusterApiUrl } = require('@solana/web3.js');
const chalk = require('chalk');

const CONNECTION_CONFIG = process.env.SOLANA_RPC_URL || 'http://localhost:8899';

// T·∫°o readline interface ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

/**
 * H√†m prompt h·ªèi ng∆∞·ªùi d√πng
 * @param {string} question - C√¢u h·ªèi
 * @returns {Promise<string>} - C√¢u tr·∫£ l·ªùi
 */
const question = (question) => {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
};

/**
 * T·∫°o keypair t·ª´ secret key
 * @param {string} secretKeyString - Secret key d·∫°ng base58 ho·∫∑c m·∫£ng s·ªë
 * @returns {Keypair} - Keypair t·∫°o ƒë∆∞·ª£c
 */
const createKeypairFromSecretKey = (secretKeyString) => {
  try {
    let secretKey;
    
    // N·∫øu l√† m·∫£ng JSON
    if (secretKeyString.trim().startsWith('[') && secretKeyString.trim().endsWith(']')) {
      secretKey = Uint8Array.from(JSON.parse(secretKeyString));
    } 
    // N·∫øu l√† base64 ho·∫∑c hex
    else {
      try {
        // Th·ª≠ xem c√≥ ph·∫£i hex kh√¥ng
        if (/^[0-9a-fA-F]+$/.test(secretKeyString) && secretKeyString.length === 128) {
          secretKey = Buffer.from(secretKeyString, 'hex');
        } 
        // M·∫∑c ƒë·ªãnh x·ª≠ l√Ω nh∆∞ base58
        else {
          const bs58 = require('bs58');
          secretKey = bs58.decode(secretKeyString);
        }
      } catch {
        // N·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng, b√°o l·ªói
        throw new Error("Secret key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");
      }
    }
    
    return Keypair.fromSecretKey(secretKey);
  } catch (e) {
    throw new Error(`Kh√¥ng th·ªÉ t·∫°o keypair: ${e.message}`);
  }
};

/**
 * ƒê·ªçc keypair t·ª´ file
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n t·ªõi file
 * @returns {Keypair} - Keypair ƒë·ªçc ƒë∆∞·ª£c
 */
const readKeypairFromFile = (filePath) => {
  try {
    // M·ªü r·ªông ~ sang ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
    if (filePath.startsWith('~')) {
      filePath = filePath.replace('~', os.homedir());
    }
    
    // ƒê·ªçc file
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const cleanedContent = fileContent.trim();
    
    // X·ª≠ l√Ω n·ªôi dung file t√πy theo ƒë·ªãnh d·∫°ng
    return createKeypairFromSecretKey(cleanedContent);
  } catch (e) {
    throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc keypair t·ª´ file: ${e.message}`);
  }
};

/**
 * Hi·ªÉn th·ªã secret key c·ªßa keypair
 * @param {Keypair} keypair - Keypair c·∫ßn hi·ªÉn th·ªã
 */
const showSecretKey = (keypair) => {
  // Hi·ªÉn th·ªã d·∫°ng m·∫£ng Uint8Array
  const secretKeyArray = Array.from(keypair.secretKey);
  console.log(chalk.yellow(`üîê Secret Key (d·∫°ng m·∫£ng): [${secretKeyArray}]`));
  
  // Hi·ªÉn th·ªã d·∫°ng base58 (th∆∞·ªùng d√πng cho Solana)
  const bs58 = require('bs58');
  const base58Key = bs58.encode(keypair.secretKey);
  console.log(chalk.yellow(`üîê Secret Key (d·∫°ng base58): ${base58Key}`));
};

/**
 * L·∫•y k·∫øt n·ªëi Solana
 * @returns {Connection} - K·∫øt n·ªëi Solana
 */
const getConnection = () => {
  // X√°c ƒë·ªãnh URL k·∫øt n·ªëi d·ª±a v√†o m√¥i tr∆∞·ªùng
  const isLocalhost = CONNECTION_CONFIG.includes('localhost') || CONNECTION_CONFIG.includes('127.0.0.1');
  
  // Kh·ªüi t·∫°o k·∫øt n·ªëi
  let connection;
  try {
    if (isLocalhost) {
      connection = new Connection(CONNECTION_CONFIG, 'confirmed');
      console.log(chalk.cyan('üì° K·∫øt n·ªëi ƒë·∫øn: Localnet (validator c·ª•c b·ªô)'));
    } else {
      connection = new Connection(CONNECTION_CONFIG, 'confirmed');
      console.log(chalk.cyan(`üì° K·∫øt n·ªëi ƒë·∫øn: ${CONNECTION_CONFIG}`));
    }
    return connection;
  } catch (e) {
    console.error(chalk.red(`‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi: ${e.message}`));
    throw e;
  }
};

/**
 * Ki·ªÉm tra s·ªë d∆∞ c·ªßa ƒë·ªãa ch·ªâ
 * @param {PublicKey} address - ƒê·ªãa ch·ªâ c·∫ßn ki·ªÉm tra
 * @returns {number} - S·ªë d∆∞ (lamports)
 */
const checkBalance = async (address) => {
  try {
    const connection = getConnection();
    const balance = await connection.getBalance(address);
    
    console.log(chalk.green(`üí∞ S·ªë d∆∞ c·ªßa ƒë·ªãa ch·ªâ ${address.toString()}:`));
    console.log(chalk.cyan(`   ${balance / LAMPORTS_PER_SOL} SOL (${balance} lamports)`));
    
    return balance;
  } catch (e) {
    console.error(chalk.red(`‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra s·ªë d∆∞: ${e.message}`));
    return 0;
  }
};

/**
 * Y√™u c·∫ßu airdrop SOL cho testing
 * @param {PublicKey} address - ƒê·ªãa ch·ªâ c·∫ßn airdrop
 * @returns {Promise<boolean>} - Th√†nh c√¥ng hay kh√¥ng
 */
const requestAirdrop = async (address) => {
  try {
    console.log(chalk.yellow('üöÅ ƒêang y√™u c·∫ßu airdrop 1 SOL...'));
    
    const connection = getConnection();
    const signature = await connection.requestAirdrop(
      address,
      1 * LAMPORTS_PER_SOL
    );
    
    await connection.confirmTransaction(signature);
    console.log(chalk.green('‚úÖ Airdrop th√†nh c√¥ng 1 SOL!'));
    return true;
  } catch (e) {
    console.error(chalk.red(`‚ùå Kh√¥ng th·ªÉ airdrop: ${e.message}`));
    console.log(chalk.yellow('‚ö†Ô∏è Airdrop ch·ªâ ho·∫°t ƒë·ªông tr√™n m√¥i tr∆∞·ªùng localnet ho·∫∑c devnet.'));
    return false;
  }
};

module.exports = {
  rl,
  question,
  createKeypairFromSecretKey,
  readKeypairFromFile,
  showSecretKey,
  getConnection,
  checkBalance,
  requestAirdrop
}; 